name: Build and deploy
on:
  push:
    tags:
      - 'v*'

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.6-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --with tests
      - name: Run tests
        env:
          SECRET_KEY: 'super-secret'
          DB_HOST: '127.0.0.1'
          DB_ENGINE: 'django.db.backends.postgresql'
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: postgres
          SOCIAL_AUTH_VK_OAUTH2_KEY: 1234567890
          SOCIAL_AUTH_VK_OAUTH2_SECRET: 1234567890
          BOT_TOKEN: "tg_bot:token"
        run: |
          python -m poetry run pytest \
            --cov=./ --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3


  build_and_push:
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/todolist
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-22.04
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Update Docker Compose
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          envsubst '$DOCKER_HUB_USERNAME,$TAG_NAME' < deploy/docker-compose-ci.yaml > deploy/docker-compose.yaml
          rm -f deploy/docker-compose-ci.yaml
      - name: Decrypt envs
        uses: anthonykgross/ansible-vault-cli-github-action@v1
        with:
          vault_key: ${{ secrets.VAULT_PASSWORD }}
          command: "ansible-vault decrypt deploy/.env"
      - name: Copy on server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "deploy/*"
          target: todolist
          strip_components: 1
      - name: Run compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd todolist
            docker-compose pull
            docker-compose up -d
      - name: Clear after deploy
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker system prune -a -f
